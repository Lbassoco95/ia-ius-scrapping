#!/usr/bin/env python3
"""
Script de prueba usando Selenium para el scraping de SCJN
"""

import sys
import os
import json
from datetime import datetime

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(__file__))

from src.scraper.selenium_scraper import SeleniumSCJNScraper

def test_selenium_scraping():
    """Probar scraping con Selenium"""
    print("üß™ INICIANDO PRUEBA CON SELENIUM")
    print("=" * 50)
    
    scraper = SeleniumSCJNScraper()
    
    try:
        # 1. Configurar driver
        print("1Ô∏è‚É£ Configurando driver de Chrome...")
        if not scraper.setup_driver():
            print("‚ùå No se pudo configurar el driver")
            return False
        print("‚úÖ Driver configurado")
        
        # 2. Navegar a la p√°gina
        print("\n2Ô∏è‚É£ Navegando a la p√°gina de SCJN...")
        if not scraper.navigate_to_search_page():
            print("‚ùå No se pudo navegar a la p√°gina")
            return False
        print("‚úÖ Navegaci√≥n exitosa")
        
        # 3. Realizar b√∫squeda
        print("\n3Ô∏è‚É£ Realizando b√∫squeda...")
        if not scraper.search_for_tesis():
            print("‚ö†Ô∏è No se pudo realizar b√∫squeda, continuando...")
        
        # 4. Extraer resultados
        print("\n4Ô∏è‚É£ Extrayendo resultados...")
        results = scraper.extract_search_results()
        
        if not results:
            print("‚ùå No se encontraron resultados")
            return False
        
        print(f"‚úÖ Encontrados {len(results)} resultados")
        
        # 5. Mostrar resultados
        print("\n5Ô∏è‚É£ Primeros resultados:")
        for i, result in enumerate(results[:3], 1):
            print(f"   {i}. ID: {result.get('scjn_id', 'N/A')}")
            print(f"      T√≠tulo: {result.get('titulo', 'Sin t√≠tulo')[:80]}...")
            print(f"      URL: {result.get('url', 'N/A')}")
            print()
        
        # 6. Probar obtenci√≥n de detalles (solo el primero)
        if results:
            print("6Ô∏è‚É£ Probando obtenci√≥n de detalles...")
            first_result = results[0]
            detail_data = scraper.get_tesis_detail(first_result['url'])
            
            if detail_data:
                print("‚úÖ Detalles obtenidos correctamente")
                print(f"   - Rubro: {detail_data.get('rubro', 'N/A')[:80]}...")
                print(f"   - Texto: {detail_data.get('texto', 'N/A')[:80]}...")
                print(f"   - PDF URL: {detail_data.get('pdf_url', 'No disponible')}")
            else:
                print("‚ö†Ô∏è No se pudieron obtener detalles")
        
        # 7. Guardar resultados
        print("\n7Ô∏è‚É£ Guardando resultados...")
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = scraper.save_results(results, f'data/selenium_test_results_{timestamp}.json')
        print(f"‚úÖ Resultados guardados en: {filename}")
        
        print("\nüéâ ¬°PRUEBA CON SELENIUM COMPLETADA EXITOSAMENTE!")
        print("=" * 50)
        print("‚úÖ El sistema con Selenium est√° funcionando correctamente")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error en la prueba: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        scraper.close_driver()

if __name__ == "__main__":
    success = test_selenium_scraping()
    sys.exit(0 if success else 1) 