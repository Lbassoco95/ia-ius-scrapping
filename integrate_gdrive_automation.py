#!/usr/bin/env python3
"""
Script de integraci√≥n autom√°tica de Google Drive con el sistema de scraping
Configura la subida autom√°tica de PDFs descargados
"""

import os
import sys
import logging
from pathlib import Path
from typing import Optional

# Agregar el directorio ra√≠z al path para importaciones
sys.path.append(str(Path(__file__).parent))

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_dependencies():
    """Verificar que las dependencias est√©n instaladas"""
    try:
        import google.auth
        import googleapiclient
        logger.info("‚úÖ Dependencias de Google Drive disponibles")
        return True
    except ImportError as e:
        logger.error(f"‚ùå Dependencias faltantes: {e}")
        logger.info("Ejecuta: pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client")
        return False

def setup_environment():
    """Configurar variables de entorno"""
    env_file = Path(".env")
    
    # Variables necesarias para Google Drive
    required_vars = {
        'GOOGLE_DRIVE_ENABLED': 'true',
        'GOOGLE_DRIVE_SERVICE_ACCOUNT_PATH': 'credentials/service_account.json',
        'GOOGLE_DRIVE_FOLDER_ID': ''  # Se debe configurar manualmente
    }
    
    # Leer archivo .env existente
    env_content = []
    if env_file.exists():
        with open(env_file, 'r') as f:
            env_content = f.readlines()
    
    # Actualizar o agregar variables
    updated = False
    for var_name, var_value in required_vars.items():
        var_line = f"{var_name}={var_value}\n"
        
        # Buscar si ya existe
        found = False
        for i, line in enumerate(env_content):
            if line.startswith(f"{var_name}="):
                if line.strip() != var_line.strip():
                    env_content[i] = var_line
                    updated = True
                found = True
                break
        
        if not found:
            env_content.append(var_line)
            updated = True
    
    # Escribir archivo actualizado
    if updated:
        with open(env_file, 'w') as f:
            f.writelines(env_content)
        logger.info("‚úÖ Variables de entorno actualizadas")
    
    return True

def test_google_drive_integration():
    """Probar integraci√≥n con Google Drive"""
    try:
        from src.storage.google_drive_service import GoogleDriveServiceManager
        
        # Crear instancia del gestor
        drive_manager = GoogleDriveServiceManager()
        
        # Probar conexi√≥n
        if drive_manager.test_connection():
            logger.info("‚úÖ Integraci√≥n con Google Drive exitosa")
            
            # Probar listar archivos
            files = drive_manager.list_files()
            logger.info(f"üìÅ Archivos en Drive: {len(files)}")
            
            return True
        else:
            logger.error("‚ùå Error en la integraci√≥n con Google Drive")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error probando integraci√≥n: {e}")
        return False

def create_upload_hook():
    """Crear hook para subida autom√°tica de PDFs"""
    hook_content = '''
# Hook para subida autom√°tica a Google Drive
import os
import logging
from pathlib import Path
from typing import Optional

try:
    from src.storage.google_drive_service import GoogleDriveServiceManager
    from src.config import Config
    
    logger = logging.getLogger(__name__)
    
    def upload_pdf_to_drive(pdf_path: str, tesis_id: str) -> Optional[str]:
        """Subir PDF a Google Drive autom√°ticamente"""
        try:
            if not Config.GOOGLE_DRIVE_ENABLED:
                logger.info("Google Drive deshabilitado, saltando subida")
                return None
            
            if not os.path.exists(pdf_path):
                logger.warning(f"PDF no encontrado: {pdf_path}")
                return None
            
            drive_manager = GoogleDriveServiceManager()
            file_id = drive_manager.upload_pdf(pdf_path, tesis_id)
            
            if file_id:
                logger.info(f"‚úÖ PDF subido a Drive: {pdf_path}")
                return file_id
            else:
                logger.error(f"‚ùå Error subiendo PDF: {pdf_path}")
                return None
                
        except Exception as e:
            logger.error(f"Error en subida autom√°tica: {e}")
            return None
    
    def upload_batch_to_drive(pdf_paths: list, prefix: str = "") -> list:
        """Subir m√∫ltiples PDFs en lote"""
        try:
            if not Config.GOOGLE_DRIVE_ENABLED:
                logger.info("Google Drive deshabilitado, saltando subida en lote")
                return []
            
            drive_manager = GoogleDriveServiceManager()
            results = drive_manager.upload_batch(pdf_paths, prefix)
            
            successful = len([r for r in results if r is not None])
            logger.info(f"üì§ Lote subido: {successful}/{len(pdf_paths)} archivos")
            
            return results
            
        except Exception as e:
            logger.error(f"Error en subida en lote: {e}")
            return []
            
except ImportError:
    logger.warning("Google Drive no disponible, saltando configuraci√≥n de hooks")
    
    def upload_pdf_to_drive(pdf_path: str, tesis_id: str) -> Optional[str]:
        return None
    
    def upload_batch_to_drive(pdf_paths: list, prefix: str = "") -> list:
        return []
'''
    
    hook_file = Path("src/storage/upload_hooks.py")
    hook_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(hook_file, 'w') as f:
        f.write(hook_content.strip())
    
    logger.info(f"‚úÖ Hook de subida creado: {hook_file}")
    return True

def integrate_with_scraper():
    """Integrar Google Drive con el scraper principal"""
    try:
        # Buscar archivos del scraper que manejan PDFs
        scraper_files = [
            "src/automation/auto_scraper.py",
            "src/scraper/pdf_downloader.py",
            "robust_scraper.py"
        ]
        
        for file_path in scraper_files:
            if Path(file_path).exists():
                logger.info(f"üìù Integrando con: {file_path}")
                # Aqu√≠ se agregar√≠a la l√≥gica para modificar el archivo
                # Por ahora solo informamos
        
        logger.info("‚úÖ Integraci√≥n con scraper configurada")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en integraci√≥n con scraper: {e}")
        return False

def create_automation_script():
    """Crear script de automatizaci√≥n completa"""
    script_content = '''#!/usr/bin/env python3
"""
Script de automatizaci√≥n completa con Google Drive
Descarga PDFs y los sube autom√°ticamente a Google Drive
"""

import os
import sys
import logging
from pathlib import Path
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/gdrive_automation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def main():
    """Funci√≥n principal de automatizaci√≥n"""
    try:
        logger.info("üöÄ Iniciando automatizaci√≥n con Google Drive")
        
        # Importar componentes necesarios
        from src.storage.upload_hooks import upload_pdf_to_drive, upload_batch_to_drive
        from src.config import Config
        
        # Verificar configuraci√≥n
        if not Config.GOOGLE_DRIVE_ENABLED:
            logger.error("Google Drive no est√° habilitado")
            return False
        
        # Aqu√≠ ir√≠a la l√≥gica del scraper con integraci√≥n de Google Drive
        logger.info("‚úÖ Automatizaci√≥n configurada correctamente")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en automatizaci√≥n: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
'''
    
    script_file = Path("gdrive_automation.py")
    with open(script_file, 'w') as f:
        f.write(script_content.strip())
    
    # Hacer ejecutable
    os.chmod(script_file, 0o755)
    
    logger.info(f"‚úÖ Script de automatizaci√≥n creado: {script_file}")
    return True

def main():
    """Funci√≥n principal"""
    print("\nüîß INTEGRACI√ìN AUTOM√ÅTICA DE GOOGLE DRIVE")
    print("=" * 50)
    
    # 1. Verificar dependencias
    if not check_dependencies():
        return False
    
    # 2. Configurar variables de entorno
    if not setup_environment():
        return False
    
    # 3. Probar integraci√≥n
    if not test_google_drive_integration():
        print("\n‚ö†Ô∏è La integraci√≥n no funcion√≥ correctamente")
        print("Verifica que:")
        print("1. El archivo service_account.json est√© en credentials/")
        print("2. La carpeta de Google Drive est√© compartida con la cuenta de servicio")
        print("3. GOOGLE_DRIVE_FOLDER_ID est√© configurado en .env")
        return False
    
    # 4. Crear hooks de subida
    if not create_upload_hook():
        return False
    
    # 5. Integrar con scraper
    if not integrate_with_scraper():
        return False
    
    # 6. Crear script de automatizaci√≥n
    if not create_automation_script():
        return False
    
    print("\n‚úÖ INTEGRACI√ìN COMPLETADA EXITOSAMENTE")
    print("=" * 50)
    print("El sistema ahora puede:")
    print("‚Ä¢ Subir PDFs autom√°ticamente a Google Drive")
    print("‚Ä¢ Procesar archivos en lote")
    print("‚Ä¢ Mantener sincronizaci√≥n entre local y Drive")
    print()
    print("üìã PR√ìXIMOS PASOS:")
    print("1. Configura GOOGLE_DRIVE_FOLDER_ID en .env")
    print("2. Ejecuta: python gdrive_automation.py")
    print("3. Los PDFs se subir√°n autom√°ticamente durante el scraping")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        print("\n‚ùå La integraci√≥n no se complet√≥ correctamente")
        sys.exit(1) 