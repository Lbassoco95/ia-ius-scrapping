#!/usr/bin/env python3
"""
Script de prueba usando Selenium para la p√°gina de b√∫squeda de la SCJN
"""

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
import json

def test_selenium_scjn():
    """Probar acceso a la p√°gina de la SCJN con Selenium"""
    
    url = "https://sjf2.scjn.gob.mx/busqueda-principal-tesis"
    
    # Configurar Chrome
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Ejecutar sin interfaz gr√°fica
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
    
    try:
        print("üöÄ Iniciando Selenium para la SCJN...")
        print(f"URL: {url}")
        
        # Inicializar driver
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # Navegar a la p√°gina
        print("üìÑ Cargando p√°gina...")
        driver.get(url)
        
        # Esperar a que la p√°gina cargue completamente
        print("‚è≥ Esperando a que la p√°gina cargue...")
        time.sleep(10)  # Esperar 10 segundos para que Angular cargue
        
        # Verificar si hay elementos de b√∫squeda
        print("üîç Buscando elementos de la p√°gina...")
        
        # Buscar formularios de b√∫squeda
        forms = driver.find_elements(By.TAG_NAME, "form")
        print(f"üìù Formularios encontrados: {len(forms)}")
        
        # Buscar campos de entrada
        inputs = driver.find_elements(By.TAG_NAME, "input")
        print(f"‚å®Ô∏è Campos de entrada encontrados: {len(inputs)}")
        
        for i, inp in enumerate(inputs[:5]):  # Mostrar solo los primeros 5
            input_type = inp.get_attribute("type")
            input_name = inp.get_attribute("name")
            input_id = inp.get_attribute("id")
            print(f"  {i+1}. Tipo: {input_type}, Nombre: {input_name}, ID: {input_id}")
        
        # Buscar botones
        buttons = driver.find_elements(By.TAG_NAME, "button")
        print(f"üîò Botones encontrados: {len(buttons)}")
        
        for i, btn in enumerate(buttons[:5]):  # Mostrar solo los primeros 5
            btn_text = btn.text
            btn_type = btn.get_attribute("type")
            print(f"  {i+1}. Texto: '{btn_text}', Tipo: {btn_type}")
        
        # Buscar enlaces
        links = driver.find_elements(By.TAG_NAME, "a")
        print(f"üîó Enlaces encontrados: {len(links)}")
        
        # Buscar elementos con texto relacionado a tesis
        tesis_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'tesis') or contains(text(), 'Tesis')]")
        print(f"üìã Elementos con 'tesis': {len(tesis_elements)}")
        
        # Buscar tablas
        tables = driver.find_elements(By.TAG_NAME, "table")
        print(f"üìä Tablas encontradas: {len(tables)}")
        
        # Buscar divs con clases espec√≠ficas
        divs = driver.find_elements(By.TAG_NAME, "div")
        print(f"üì¶ Divs encontrados: {len(divs)}")
        
        # Guardar el HTML final
        html_content = driver.page_source
        with open('data/scjn_selenium_analysis.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üíæ HTML con Selenium guardado en: data/scjn_selenium_analysis.html")
        
        # Intentar hacer una b√∫squeda simple
        print("\nüîç Intentando hacer una b√∫squeda...")
        
        # Buscar campo de b√∫squeda
        search_inputs = driver.find_elements(By.XPATH, "//input[@type='text' or @type='search']")
        if search_inputs:
            print(f"‚úÖ Campo de b√∫squeda encontrado: {len(search_inputs)}")
            
            # Intentar escribir en el primer campo de b√∫squeda
            try:
                search_inputs[0].clear()
                search_inputs[0].send_keys("derecho constitucional")
                print("‚úÖ Texto ingresado en campo de b√∫squeda")
                
                # Buscar bot√≥n de b√∫squeda
                search_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'Buscar') or contains(text(), 'Search')]")
                if search_buttons:
                    print("‚úÖ Bot√≥n de b√∫squeda encontrado")
                    search_buttons[0].click()
                    print("‚úÖ B√∫squeda ejecutada")
                    
                    # Esperar resultados
                    time.sleep(5)
                    
                    # Buscar resultados
                    results = driver.find_elements(By.XPATH, "//*[contains(@class, 'result') or contains(@class, 'item') or contains(@class, 'row')]")
                    print(f"üìã Posibles resultados encontrados: {len(results)}")
                    
                else:
                    print("‚ùå No se encontr√≥ bot√≥n de b√∫squeda")
                    
            except Exception as e:
                print(f"‚ùå Error en b√∫squeda: {e}")
        else:
            print("‚ùå No se encontraron campos de b√∫squeda")
        
        # Cerrar driver
        driver.quit()
        print("‚úÖ Driver cerrado correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error con Selenium: {e}")
        try:
            driver.quit()
        except:
            pass
        return False

if __name__ == "__main__":
    test_selenium_scjn() 