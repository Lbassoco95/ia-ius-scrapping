#!/usr/bin/env python3
"""
Script de debug para probar la extracci√≥n de datos
"""

import time
import re
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

def debug_extraction():
    """Debug de la extracci√≥n de datos"""
    
    # Configurar Chrome
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36")
    
    service = Service(executable_path="/usr/local/bin/chromedriver")
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    try:
        print("üîç Debug de extracci√≥n de datos...")
        
        # Navegar y buscar
        url = "https://sjf2.scjn.gob.mx/busqueda-principal-tesis"
        driver.get(url)
        time.sleep(5)
        
        # Seleccionar √©poca
        epoca_links = driver.find_elements(By.XPATH, "//a[contains(text(), '√âpoca')]")
        if epoca_links:
            epoca_links[0].click()
            time.sleep(2)
        
        # Buscar y realizar b√∫squeda
        inputs = driver.find_elements(By.TAG_NAME, "input")
        search_input = None
        for inp in inputs:
            if inp.get_attribute("type") in ["text", "search"] and inp.is_displayed():
                search_input = inp
                break
        
        if search_input:
            search_input.clear()
            search_input.send_keys("derecho")
            time.sleep(2)
            
            buttons = driver.find_elements(By.TAG_NAME, "button")
            search_button = None
            for btn in buttons:
                if btn.get_attribute("type") == "submit" and btn.is_displayed():
                    search_button = btn
                    break
            
            if search_button:
                search_button.click()
                time.sleep(8)
                
                print("üìã Probando extracci√≥n...")
                
                # Buscar elemento de resultado
                result_selectors = [
                    ".list-group-item",
                    ".item",
                    "[class*='item']"
                ]
                
                target_element = None
                for selector in result_selectors:
                    try:
                        elements = driver.find_elements(By.CSS_SELECTOR, selector)
                        for elem in elements:
                            text = elem.text.strip()
                            if text and len(text) > 10:
                                target_element = elem
                                break
                        if target_element:
                            break
                    except:
                        continue
                
                if target_element:
                    print(f"üéØ Elemento encontrado: {target_element.text[:100]}...")
                    
                    # Probar extracci√≥n de ID
                    print("\nüîç Extrayendo ID...")
                    id_selectors = [
                        ".list-item-text.fw-bold",
                        ".list-item-text",
                        "[class*='list-item-text']",
                        "a[class*='fw-bold']"
                    ]
                    
                    scjn_id = ""
                    for selector in id_selectors:
                        try:
                            id_elem = target_element.find_element(By.CSS_SELECTOR, selector)
                            id_text = id_elem.text.strip()
                            print(f"  Selector '{selector}': '{id_text}'")
                            numbers = re.findall(r'\d{6,}', id_text)
                            if numbers:
                                scjn_id = numbers[0]
                                print(f"  ‚úÖ ID extra√≠do: {scjn_id}")
                                break
                        except Exception as e:
                            print(f"  ‚ùå Error con selector '{selector}': {e}")
                    
                    # Probar extracci√≥n de t√≠tulo
                    print("\nüîç Extrayendo t√≠tulo...")
                    title_selectors = [
                        ".tesis-rubro-completo",
                        ".block-with-text.text-decoration-none.font-weight-bold",
                        "[class*='tesis-rubro']",
                        "a[class*='tesis-rubro']"
                    ]
                    
                    titulo = ""
                    url = ""
                    for selector in title_selectors:
                        try:
                            title_elem = target_element.find_element(By.CSS_SELECTOR, selector)
                            titulo = title_elem.text.strip()
                            url = title_elem.get_attribute("href")
                            print(f"  Selector '{selector}': '{titulo[:50]}...'")
                            print(f"  URL: {url}")
                            if titulo and url:
                                print(f"  ‚úÖ T√≠tulo extra√≠do: {titulo[:50]}...")
                                break
                        except Exception as e:
                            print(f"  ‚ùå Error con selector '{selector}': {e}")
                    
                    # Probar extracci√≥n de metadatos
                    print("\nüîç Extrayendo metadatos...")
                    metadata_selectors = [
                        ".list-item-text2",
                        "[class*='list-item-text2']"
                    ]
                    
                    metadata = {}
                    for selector in metadata_selectors:
                        try:
                            meta_elem = target_element.find_element(By.CSS_SELECTOR, selector)
                            metadata_text = meta_elem.text.strip()
                            print(f"  Selector '{selector}': '{metadata_text[:50]}...'")
                            if metadata_text:
                                parts = metadata_text.split(';')
                                if len(parts) >= 4:
                                    metadata['organo'] = parts[0].strip()
                                    metadata['epoca'] = parts[1].strip()
                                    metadata['publicacion'] = parts[2].strip()
                                    metadata['numero'] = parts[3].strip()
                                    print(f"  ‚úÖ Metadatos extra√≠dos: {metadata}")
                                break
                        except Exception as e:
                            print(f"  ‚ùå Error con selector '{selector}': {e}")
                    
                    # Resultado final
                    print("\nüìä RESULTADO FINAL:")
                    print("=" * 50)
                    print(f"ID: {scjn_id}")
                    print(f"T√≠tulo: {titulo[:50]}...")
                    print(f"URL: {url}")
                    print(f"Metadatos: {metadata}")
                    
                    if scjn_id or titulo:
                        print("‚úÖ Extracci√≥n exitosa")
                    else:
                        print("‚ùå Extracci√≥n fallida")
                    
                else:
                    print("‚ùå No se encontr√≥ elemento de resultado")
                
            else:
                print("‚ùå No se encontr√≥ bot√≥n de b√∫squeda")
        else:
            print("‚ùå No se encontr√≥ campo de b√∫squeda")
        
        print("\n‚úÖ Debug completado")
        
    except Exception as e:
        print(f"‚ùå Error durante el debug: {e}")
    
    finally:
        driver.quit()

if __name__ == "__main__":
    debug_extraction() 